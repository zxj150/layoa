<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx" xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd ">
	<!-- 启动自动扫描机制 -->
	<context:component-scan base-package="com.situ.layoa">
		<!-- Controller层实例的生成 交给SpringMVC去处理 -->
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
		<context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.RestController" />
	</context:component-scan>
	<!-- 配置数据源 -->
	<context:property-placeholder location="classpath:jdbc.properties" />
	<!-- 定义数据源Bean,使用druid数据源实现 -->
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
		<property name="driverClassName" value="${db.driverClass}" />
		<property name="jdbcUrl" value="${db.jdbcUrl}" />
		<property name="username" value="${db.username}" />
		<property name="password" value="${db.password}" />
		<!-- 连接只读数据库时配置为true， 保证安全 -->
		<property name="readOnly" value="false" />
		<!-- 最小空闲连接数量 -->
		<property name="minimumIdle" value="${pool.minIdle}" />
		<!-- 连接池最大连接数，默认是10 -->
		<property name="maximumPoolSize" value="${pool.maxActive}" />
		<!-- 等待连接池分配连接的最大时长（毫秒），超过这个时长还没可用的连接则发生SQLException， 缺省:30秒 -->
		<property name="connectionTimeout" value="30000" />
		<!-- 一个连接idle状态的最大时长（毫秒），超时则被释放（retired），缺省:10分钟 -->
		<property name="idleTimeout" value="600000" />
		<!-- 一个连接的生命时长（毫秒），超时而且没被使用则被释放（retired），缺省:30分钟，建议设置比数据库超时时长少30秒，参考MySQL wait_timeout参数（show variables like '%timeout%';） -->
		<property name="maxLifetime" value="1800000" />
	</bean>
	<!-- 让Spring容器 生成 sqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 将数据源 注入进来 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 配置需要生成别名的类的包名，会去进行扫描，并生成别名。 -->
		<property name="typeAliasesPackage" value="com.situ.layoa" />
		<!-- 配置Mybatis的配置文件 -->
		<property name="configLocation" value="classpath:mybatis/mybaits-config.xml" />
		<!-- 配置Mybatis的映射文件 -->
		<property name="mapperLocations" value="classpath:mybatis/mappers/*-mapper.xml" />
	</bean>

	<!-- 使用 MapperScannerConfigurer,将 会 查 找 类 路 径 下 的 映 射 器 并 自 动 将 它 们 创 建 成 MapperFactoryBean -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 配置要Scanner的基本包名 -->
		<property name="basePackage" value="com.situ.layoa" />
		<!-- 配置要处理的annotation -->
		<property name="annotationClass" value="org.springframework.stereotype.Repository" />
	</bean>
	<!-- 配置事务管理器Bean,因为使用MyBatis持久化技术,故使用DataSourceTransactionManager 事务管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 配置启用注解的事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
</beans>